import {
  __commonJS
} from "./chunk-LXPOGQIV.js";

// node_modules/fast-base64-decode/index.js
var require_fast_base64_decode = __commonJS({
  "node_modules/fast-base64-decode/index.js"(exports, module) {
    "use strict";
    var lookup = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 62, 0, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 0, 0, 0, 63, 0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51];
    module.exports = function base64Decode2(source, target) {
      var sourceLength = source.length;
      var paddingLength = source[sourceLength - 2] === "=" ? 2 : source[sourceLength - 1] === "=" ? 1 : 0;
      var tmp;
      var byteIndex = 0;
      var baseLength = sourceLength - paddingLength & 4294967292;
      for (var i = 0; i < baseLength; i += 4) {
        tmp = lookup[source.charCodeAt(i)] << 18 | lookup[source.charCodeAt(i + 1)] << 12 | lookup[source.charCodeAt(i + 2)] << 6 | lookup[source.charCodeAt(i + 3)];
        target[byteIndex++] = tmp >> 16 & 255;
        target[byteIndex++] = tmp >> 8 & 255;
        target[byteIndex++] = tmp & 255;
      }
      if (paddingLength === 1) {
        tmp = lookup[source.charCodeAt(i)] << 10 | lookup[source.charCodeAt(i + 1)] << 4 | lookup[source.charCodeAt(i + 2)] >> 2;
        target[byteIndex++] = tmp >> 8 & 255;
        target[byteIndex++] = tmp & 255;
      }
      if (paddingLength === 2) {
        tmp = lookup[source.charCodeAt(i)] << 2 | lookup[source.charCodeAt(i + 1)] >> 4;
        target[byteIndex++] = tmp & 255;
      }
    };
  }
});

// vite:cjs-external-facade:react-native
import * as m from "react-native";
var require_react_native = __commonJS({
  "vite:cjs-external-facade:react-native"(exports, module) {
    module.exports = m;
  }
});

// node_modules/react-native-get-random-values/index.js
var base64Decode = require_fast_base64_decode();
var { NativeModules } = require_react_native();
var TypeMismatchError = class extends Error {
};
var QuotaExceededError = class extends Error {
};
var warned = false;
function insecureRandomValues(array) {
  if (!warned) {
    console.warn("Using an insecure random number generator, this should only happen when running in a debugger without support for crypto.getRandomValues");
    warned = true;
  }
  for (let i = 0, r; i < array.length; i++) {
    if ((i & 3) === 0)
      r = Math.random() * 4294967296;
    array[i] = r >>> ((i & 3) << 3) & 255;
  }
  return array;
}
function getRandomBase64(byteLength) {
  if (NativeModules.RNGetRandomValues) {
    return NativeModules.RNGetRandomValues.getRandomBase64(byteLength);
  } else if (NativeModules.ExpoRandom) {
    return NativeModules.ExpoRandom.getRandomBase64String(byteLength);
  } else if (window.ExpoModules) {
    return window.ExpoModules.ExpoRandom.getRandomBase64String(byteLength);
  } else {
    throw new Error("Native module not found");
  }
}
function getRandomValues(array) {
  if (!(array instanceof Int8Array || array instanceof Uint8Array || array instanceof Int16Array || array instanceof Uint16Array || array instanceof Int32Array || array instanceof Uint32Array || array instanceof Uint8ClampedArray)) {
    throw new TypeMismatchError("Expected an integer array");
  }
  if (array.byteLength > 65536) {
    throw new QuotaExceededError("Can only request a maximum of 65536 bytes");
  }
  if (window.expo && window.expo.modules && window.expo.modules.ExpoCrypto && window.expo.modules.ExpoCrypto.getRandomValues) {
    window.expo.modules.ExpoCrypto.getRandomValues(array);
    return array;
  }
  if (isRemoteDebuggingInChrome()) {
    return insecureRandomValues(array);
  }
  base64Decode(getRandomBase64(array.byteLength), new Uint8Array(array.buffer, array.byteOffset, array.byteLength));
  return array;
}
function isRemoteDebuggingInChrome() {
  if ("RN$Bridgeless" in window && RN$Bridgeless === true) {
    return false;
  }
  return typeof window.nativeCallSyncHook === "undefined";
}
if (typeof window.crypto !== "object") {
  window.crypto = {};
}
if (typeof window.crypto.getRandomValues !== "function") {
  window.crypto.getRandomValues = getRandomValues;
}
//# sourceMappingURL=react-native-get-random-values.js.map
