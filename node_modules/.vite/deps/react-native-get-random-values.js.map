{
  "version": 3,
  "sources": ["../../fast-base64-decode/index.js", "vite:cjs-external-facade:react-native", "../../react-native-get-random-values/index.js"],
  "sourcesContent": ["'use strict'\n\nvar lookup = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 62, 0, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 0, 0, 0, 63, 0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]\n\nmodule.exports = function base64Decode (source, target) {\n  var sourceLength = source.length\n  var paddingLength = (source[sourceLength - 2] === '=' ? 2 : (source[sourceLength - 1] === '=' ? 1 : 0))\n\n  var tmp\n  var byteIndex = 0\n  var baseLength = (sourceLength - paddingLength) & 0xfffffffc\n\n  for (var i = 0; i < baseLength; i += 4) {\n    tmp = (lookup[source.charCodeAt(i)] << 18) | (lookup[source.charCodeAt(i + 1)] << 12) | (lookup[source.charCodeAt(i + 2)] << 6) | (lookup[source.charCodeAt(i + 3)])\n\n    target[byteIndex++] = (tmp >> 16) & 0xFF\n    target[byteIndex++] = (tmp >> 8) & 0xFF\n    target[byteIndex++] = (tmp) & 0xFF\n  }\n\n  if (paddingLength === 1) {\n    tmp = (lookup[source.charCodeAt(i)] << 10) | (lookup[source.charCodeAt(i + 1)] << 4) | (lookup[source.charCodeAt(i + 2)] >> 2)\n\n    target[byteIndex++] = (tmp >> 8) & 0xFF\n    target[byteIndex++] = tmp & 0xFF\n  }\n\n  if (paddingLength === 2) {\n    tmp = (lookup[source.charCodeAt(i)] << 2) | (lookup[source.charCodeAt(i + 1)] >> 4)\n\n    target[byteIndex++] = tmp & 0xFF\n  }\n}\n", "import * as m from \"vite-cjs-external-facade:react-native\";module.exports = m;", "const base64Decode = require('fast-base64-decode')\nconst { NativeModules } = require('react-native')\n\nclass TypeMismatchError extends Error {}\nclass QuotaExceededError extends Error {}\n\nlet warned = false\nfunction insecureRandomValues (array) {\n  if (!warned) {\n    console.warn('Using an insecure random number generator, this should only happen when running in a debugger without support for crypto.getRandomValues')\n    warned = true\n  }\n\n  for (let i = 0, r; i < array.length; i++) {\n    if ((i & 0x03) === 0) r = Math.random() * 0x100000000\n    array[i] = (r >>> ((i & 0x03) << 3)) & 0xff\n  }\n\n  return array\n}\n\n/**\n * @param {number} byteLength\n * @returns {string}\n */\nfunction getRandomBase64 (byteLength) {\n  if (NativeModules.RNGetRandomValues) {\n    return NativeModules.RNGetRandomValues.getRandomBase64(byteLength)\n  } else if (NativeModules.ExpoRandom) {\n    // Expo SDK 41-44\n    return NativeModules.ExpoRandom.getRandomBase64String(byteLength)\n  } else if (global.ExpoModules) {\n    // Expo SDK 45+\n    return global.ExpoModules.ExpoRandom.getRandomBase64String(byteLength);\n  } else {\n    throw new Error('Native module not found')\n  }\n}\n\n/**\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray} array\n */\nfunction getRandomValues (array) {\n  if (!(array instanceof Int8Array || array instanceof Uint8Array || array instanceof Int16Array || array instanceof Uint16Array || array instanceof Int32Array || array instanceof Uint32Array || array instanceof Uint8ClampedArray)) {\n    throw new TypeMismatchError('Expected an integer array')\n  }\n\n  if (array.byteLength > 65536) {\n    throw new QuotaExceededError('Can only request a maximum of 65536 bytes')\n  }\n\n  // Expo SDK 48+\n  if (global.expo && global.expo.modules && global.expo.modules.ExpoCrypto && global.expo.modules.ExpoCrypto.getRandomValues) {\n    // ExpoCrypto.getRandomValues doesn't return the array\n    global.expo.modules.ExpoCrypto.getRandomValues(array)\n    return array\n  }\n\n  // Calling getRandomBase64 in remote debugging mode leads to the error\n  // \"Calling synchronous methods on native modules is not supported in Chrome\".\n  // So in that specific case we fall back to just using Math.random().\n  if (isRemoteDebuggingInChrome()) {\n    return insecureRandomValues(array)\n  }\n\n  base64Decode(getRandomBase64(array.byteLength), new Uint8Array(array.buffer, array.byteOffset, array.byteLength))\n\n  return array\n}\n\nfunction isRemoteDebuggingInChrome () {\n  // Remote debugging in Chrome is not supported in bridgeless\n  if ('RN$Bridgeless' in global && RN$Bridgeless === true) {\n    return false\n  }\n\n  return __DEV__ && typeof global.nativeCallSyncHook === 'undefined'\n}\n\nif (typeof global.crypto !== 'object') {\n  global.crypto = {}\n}\n\nif (typeof global.crypto.getRandomValues !== 'function') {\n  global.crypto.getRandomValues = getRandomValues\n}\n"],
  "mappings": "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",
  "names": ["base64Decode"]
}
